import type { Query } from '../types/state.js';

export function generateStub(query: Query): string {
  const functionName = query.id;
  const typeNameResult = `${capitalize(functionName)}Result`;
  const typeNameParams = `${capitalize(functionName)}Params`;

  // Generate params type
  const paramsType = generateParamsType(typeNameParams, query.params);

  const stub = `// Auto-generated by Corsair
// Query: "${query.nlQuery}"
// Source: ${query.sourceFile}:${query.lineNumber}
// Status: GENERATING (stub)

${paramsType}

export type ${typeNameResult} = any;

export async function ${functionName}(params: ${typeNameParams}): Promise<${typeNameResult}> {
  throw new Error('Corsair is generating this query...');
}

export default ${functionName};
`;

  return stub;
}

function generateParamsType(typeName: string, params: Record<string, string>): string {
  if (Object.keys(params).length === 0) {
    return `export type ${typeName} = Record<string, never>;`;
  }

  const fields = Object.entries(params)
    .map(([key, type]) => `  ${key}: ${type};`)
    .join('\n');

  return `export type ${typeName} = {\n${fields}\n};`;
}

function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
