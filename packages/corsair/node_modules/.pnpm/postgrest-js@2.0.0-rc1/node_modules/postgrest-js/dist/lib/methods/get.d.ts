import { PostgrestJsConfig } from '../../index';
import { PostgrestJsOrderParam, PostgrestJsFilterParam, PostgrestJsSelectParam, PostgrestJsFilterGroup } from '../definitions';
export interface PostgrestJsGetParams {
    /**
     * Ordering.
     */
    order?: PostgrestJsOrderParam | PostgrestJsOrderParam[] | string | string[];
    /**
     * Vertical select query, can be either passed as raw string or an array of strings (e.g. ['*', 'foo(*)', 'bar(a,b)'])
     */
    select?: PostgrestJsSelectParam | string[] | string;
    /**
     * Filters to be applied when getting data.
     * Can be passed either as a simple string or as an array of PostgrestJsFilterParam objects.
     */
    filters?: Array<PostgrestJsFilterParam | PostgrestJsFilterGroup> | string;
    /**
     * Are we counting all the records?
     */
    count?: boolean;
    /**
     * Pagination
     */
    limit?: number;
    offset?: number;
}
export interface PostgrestJsGetWithFetchParams extends PostgrestJsGetParams {
    /**
     * Is this request supposed to directly retrieve only a single item from collection?
     */
    fetch: boolean;
}
export interface PostgrestJsGetResponsePagination {
    total?: number;
}
export interface PostgrestJsGetResponse<T> {
    items: T[];
    pagination: PostgrestJsGetResponsePagination;
}
/**
 * Performs a GET request on a model in the API
 * @param model Name of the model
 * @param params Parameters of the request
 * @param config PostgrestJsConfig configuration object
 */
export declare function get<T = any>(model: string, params: PostgrestJsGetWithFetchParams, config: PostgrestJsConfig): Promise<T | undefined>;
export declare function get<T = any>(model: string, params: PostgrestJsGetParams, config: PostgrestJsConfig): Promise<PostgrestJsGetResponse<T>>;
/**
 * A shortcut to fetch only one row from model. Always returns either the row or undefined.
 * @param model
 * @param property
 * @param propertyValue
 * @param config
 */
export declare function fetch<T = any>(model: string, column: string, columnValue: string, config: PostgrestJsConfig): Promise<T | undefined>;
/**
 * A shortcut to fetch only one row from model by the "id" column. Always returns either the row or undefined.
 * @param model
 * @param id
 * @param config
 */
export declare function fetchById<T = any>(model: string, id: string, config: PostgrestJsConfig): Promise<T | undefined>;
