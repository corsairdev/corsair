import axios from 'axios';
import { generatePostgrestRequestHeaders, generatePostgrestFilterProperties } from '../util';
/**
 * Updates a model filtered by passed filters
 * @param model Model to update
 * @param filters An array of filter params or operations
 * @param payload Object with values to be updated
 * @param config Configuration object
 */
export function update(model, filters, payload, config) {
    const path = `${config.endpoint}/${model}`;
    const requestParams = {};
    // Process filters
    const filterMap = generatePostgrestFilterProperties(filters);
    Object.keys(filterMap).map(key => {
        requestParams[key] = filterMap[key];
    });
    return axios.patch(path, payload, {
        params: requestParams,
        headers: generatePostgrestRequestHeaders(config)
    })
        .then(res => {
        return {
            item: res.data
        };
    });
}
/**
 * Updates a model filtering by specified column value
 * @param model Model to update
 * @param column Column to filter the update by
 * @param columnValue Column value to filter the update by
 * @param payload Object with values to be updated
 * @param config Configuration object
 */
export function updateByColumn(model, column, columnValue, payload, config) {
    return update(model, [
        {
            column: column,
            type: 'eq',
            value: columnValue
        }
    ], payload, config);
}
/**
 * Updates a model by id column
 * @param model Model to update
 * @param id Id of the row to update
 * @param payload Object with values to be updated
 * @param config Configuration object
 */
export function updateById(model, id, payload, config) {
    return updateByColumn(model, 'id', id, payload, config);
}
//# sourceMappingURL=update.js.map